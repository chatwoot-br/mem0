# Production environment values for Mem0
# This file contains configurations suitable for production environments

replicaCount: 3

image:
  tag: "v1.0.0" # Use specific version tags in production
  pullPolicy: IfNotPresent

# Enable autoscaling with production limits
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Production resources
resources:
  limits:
    cpu: 4000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 1Gi

# Enable ingress with production TLS
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-burst-multiplier: "5"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
  hosts:
    - host: mem0.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mem0-prod-tls
      hosts:
        - mem0.example.com

# Enable all security features
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress

podDisruptionBudget:
  enabled: true
  minAvailable: "50%"

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  path: /health
  honorLabels: true
  metricRelabelings:
    - sourceLabels: [__name__]
      regex: "mem0_.*"
      targetLabel: "service"
      replacement: "mem0"

# Enable persistence with high-performance storage
persistence:
  enabled: true
  size: 50Gi
  storageClass: "high-performance-ssd"
  annotations:
    volume.kubernetes.io/storage-class: "high-performance-ssd"

# PostgreSQL configuration for production
postgresql:
  enabled: false # Use external managed PostgreSQL in production
  # When using external PostgreSQL, configure these in config section

# Neo4j configuration for production
neo4j:
  enabled: false # Use external managed Neo4j in production
  # When using external Neo4j, configure these in config section

# External database configuration
config:
  postgresql:
    host: "postgres.production.example.com"
    port: 5432
    database: "mem0_prod"
    username: "mem0_prod"
    collectionName: "memories"
  
  neo4j:
    uri: "bolt://neo4j.production.example.com:7687"
    username: "mem0_prod"

# Production secrets (use external secret management like AWS Secrets Manager, HashiCorp Vault, etc.)
secrets:
  # Option 1: Use existing secret (recommended for production)
  existingSecret: "mem0-production-secrets"
  existingSecretKeys:
    openaiApiKey: "openai-api-key"
    postgresqlPassword: "postgres-password"
    neo4jPassword: "neo4j-password"

  # Option 2: Provide secrets directly (not recommended for production)
  # openaiApiKey: "" # Set via external secret management
  # postgresqlPassword: "" # Set via external secret management
  # neo4jPassword: "" # Set via external secret management

# Production security and reliability
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsUser: 1000
  fsGroupChangePolicy: "OnRootMismatch"

# Pod anti-affinity for high availability
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - mem0
      topologyKey: kubernetes.io/hostname
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - mem0
        topologyKey: topology.kubernetes.io/zone

# Node selection for production workloads
nodeSelector:
  node-type: "compute-optimized"
  environment: "production"

# Tolerations for dedicated nodes
tolerations:
- key: "dedicated"
  operator: "Equal"
  value: "mem0"
  effect: "NoSchedule"

# Production annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8000"
  prometheus.io/path: "/health"
  co.elastic.logs/enabled: "true"
  co.elastic.logs/json.keys_under_root: "true"

# Service account annotations for production
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/mem0-production-role" # Example for AWS EKS
    # azure.workload.identity/client-id: "client-id" # Example for Azure AKS
    # iam.gke.io/gcp-service-account: "mem0-prod@project.iam.gserviceaccount.com" # Example for GKE